class Painting:
    def __init__(self , paintingID , painterName , paintingPrice , paintingType):
        self.paintingID = paintingID
        self.painterName = painterName
        self.paintingPrice = paintingPrice
        self.paintingType = paintingType
        
class ShowRoom:
    def __init__(self , paintingList):
        self.paintingList = paintingList
        
    def getTotalPaintingPrice(self , ptype):#2
        total=0
        for item in paintingList:
            if item.paintingType.lower() == ptype.lower():
                total = total+item.paintingPrice
        
        if total==0:
            return None
        else:
            return total
    
    def getPainterWithMaxCountOfPaintings(self):
        dic={}
        for item in paintingList:#3
            if item.painterName not in dic:
                dic[item.painterName] = 1
            else:
                dic[item.painterName] = dic[item.painterName]+1

        key_list = list(dic.keys()) #4
        value_list = list(dic.values())
        key_list.sort()
        value_list.sort(reverse= True)
        for name in key_list:
            if dic[name] == value_list[0]:
                return name #5

        
            
n = eval(input())
paintingList=[] #1
for i in range(n):
    paintingID = int(input())
    painterName = input()
    paintingPrice = eval(input())
    paintingType = input()
    paintingList.append(Painting(paintingID,painterName,paintingPrice,paintingType))
    
ptype = input()

y = ShowRoom(paintingList)
val = y.getTotalPaintingPrice(ptype)
if val == None:
    print("Painting not found")
else:
    print(val)
    
name = y.getPainterWithMaxCountOfPaintings()
print(name)










-------------------------------MAY 31 20221 CPA---------------------------------




class Question:
    def __init__(self,questionId,markedOption,score):
        self.questionId = questionId
        self.markedOption = markedOption
        self.score = score
        self.status = "Not Answered"

class Student:
    def __init__(self,registrationId,questionsAttempted):
        self.registrationId = registrationId
        self.questionsAttempted = questionsAttempted
    
    def evaluateQuestions(self,answerKey): #2
        for item in self.questionsAttempted:
            if item.questionId not in answerKey.keys():
                continue 
            elif(item.markedOption == answerKey[item.questionId]):
                item.status = "correct"
            else:
                item.status = "incorrect"
        
        
    
    def findGrade(self):
        total= 0
        for item in self.questionsAttempted:
            if item.status.lower() == "correct":
                total += item.score
        
        if total>= 80:
            return 'A'
        elif total>=70:
            return 'B'
        elif total>=60:
            return 'C'
        else:
            return 'F'
        
n = eval(input())
questionsAttempted=[] #1
for i in range(n):
    questionId = eval(input())
    markedOption = eval(input())
    score = eval(input())
    questionsAttempted.append(Question(questionId,markedOption,score))
    
m = eval(input())
answerKey ={}
for i in range(m):
    key = eval(input())
    value = eval(input())
    answerKey[key]=value

y = Student(120,questionsAttempted)

y.evaluateQuestions(answerKey)

for item in questionsAttempted:
    print(item.questionId,item.status)
    
grade = y.findGrade()
print(grade)